{
  "projects": [
    {
      "id": "1",
      "Title": "MyFlix Client - Angular",
      "Description": "MyFlix is a small application developed in Angular, and it showcases various informations from a small database (REST API) of movies. Users can register, update/add information about themselves (securely via password hashing) and add/remove movie titles to a list of their favourites.",
      "Technologies": ["HTML5", "SCSS", "TypeScript"],
      "Libraries": ["Angular-Material"],
      "Frameworks": ["Angular"],
      "Github_Repo": ["https://github.com/valvegan/MyFlix-angular-"],
      "Live_Site": ["https://valvegan.github.io/MyFlix-angular-/welcome"],
      "img": "https://raw.githubusercontent.com/valvegan/MyFlix-angular-/master/images_github/moviecard.png"
    },
    {
        "id": "2",
        "Title": "Chat Application",
        "Description": "A chatting application for mobile devices, created in React Native. Users can sign into the app anonymously, pick a background colour of their choice (among 4 options), and they are offered the features of to sharing images and their location (as well as text-messages), as well as accessing messages while offline (through React-Native's AsyncStorage)",
        "Technologies": ["Expo"],
        "Libraries": ["Gifted-Chat"],
        "Frameworks": ["React-Native"],
        "Database": ["Google Firestore"],
        "Github_Repo": ["https://github.com/valvegan/Chat-App"],
        "Live_Site": ["https://drive.google.com/file/d/1Yba7y0Waq7wAd0oYgheSY2jbW37B1PeK/view?usp=sharing"],
        "img": "https://raw.githubusercontent.com/valvegan/portfoliov2/master/src/images/Chat-App.jpg"
      },
    {
      "id": "3",
      "Title": "The Events App",
      "Description": "A serverless PWA (progressive web application), developed via TDD (unit, integration, user acceptance, and end-to-end testing) and BDD (Gherkin syntax and features) techniques. Users can access the application with their Google account, then they can browse through a set of fake events fetched from a Google Calendar using the respective Google API. Users can also view data charts about the events available! Pop-up messages appear when a user incurs in a warning, or an error.",
      "Description_2": "Over the course of my project not only have I worked quite heavily on testing processes, I've also learned about serverless functions, cloud service providers, and Google APIs",
      "Serverless_Cloud_Provider": ["AWS Lambda"],
      "Libraries": ["Recharts", "React", "Axios"],
      "Test_Runners": ["Jest", "Cucumber", "Puppeteer"],
      "Github_Repo": ["https://github.com/valvegan/events_app"],
      "Live_Site": ["https://valvegan.github.io/events_app/"],
      "img": "https://raw.githubusercontent.com/valvegan/portfoliov2/master/src/images/events_app.png",
      "imgmobile": "https://raw.githubusercontent.com/valvegan/portfoliov2/master/src/images/events-app_mobile.jpg"
    },
    {
      "id": "4",
      "Title": "MyFlix Client - React",
      "Description": "The front end application stemming from its respective server-side code (REST API and database). MyFlix Client is an SPA (single page application) built following the MVC pattern (and Flux with Redux), where users can register/login, update their details, de-register, view and filter through a detailed collection of movies (fetched from the API), and add and remove movies to their list of favorites.",
      "Libraries": ["React", "Axios", "Redux", "Sass"],
      "Frameworks": ["Bootstrap"],
      "Architecture": ["MVC", "Flux", "Redux"],
      "Github_Repo": ["https://github.com/valvegan/myFlix-client"],
      "Live_Site": ["https://valentina-my-flix-client.netlify.app/"],
      "img": "https://raw.githubusercontent.com/valvegan/portfoliov2/master/src/images/myflix_client.png",
      "imgmobile": "https://raw.githubusercontent.com/valvegan/portfoliov2/master/src/images/myflix_mobile.jpg"
    },
    {
      "id": "5",
      "Title": "MyFlix API",
      "Description": "The server side backbone of MyFlix Client. The dabase stores data about a small collection of movies, and the API (myFlix, created following the REST pattern) interacts with it by performing CRUD operations (Create, Read, Update and Delete). Requests are sent via endpoints and/or a request body in JSON format (for registering and updating new users), and tested through Postman. Authentication, authorization, and data validation logic are implemented, and the API meets data security regulations.",
      "Database": ["MongoDB"],
      "Libraries": ["Axios"],
      "Technologies": [
        "Postman",
        "Node",
        "postgreSql",
        "morgan",
        "CORS",
        "Passport"
      ],
      "Frameworks": ["Express"],
      "Github_Repo": ["https://github.com/valvegan/movie_api"],
      "Heroku_Deployment": ["https://my-flix-api-2022.herokuapp.com/"],
      "img": "https://raw.githubusercontent.com/valvegan/portfoliov2/master/src/images/myflix_api.png"
    },
    {
      "id": "6",
      "Title": "Pokedex",
      "Description": "A small application that fetches information from the public Pokemon API and displays a list of pokemons. Users can view more information about each Pokemon (via window pop-up upon click on any pokemon name) and filter/search through the listed Pokemons.",
      "Technologies": ["HTML", "CSS", "JavaScript"],
      "Libraries": ["jQuery"],
      "Frameworks": ["Bootstrap"],
      "Github_Repo": ["https://github.com/valvegan/simple-js-app"],
      "Live_Site": ["https://valvegan.github.io/simple-js-app/"],
      "img": "https://raw.githubusercontent.com/valvegan/portfoliov2/master/src/images/simple_js_app.png",
      "imgmobile": "https://raw.githubusercontent.com/valvegan/portfoliov2/master/src/images/js-app_mobile.jpg"
    }
  ]
}
